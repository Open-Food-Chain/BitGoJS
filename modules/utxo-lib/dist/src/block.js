var Buffer = require('safe-buffer').Buffer;
var bcrypto = require('./crypto');
var fastMerkleRoot = require('merkle-lib/fastRoot');
var typeforce = require('typeforce');
var types = require('./types');
var bufferutils = require('./bufferutils');
var varuint = require('varuint-bitcoin');
var networks = require('./networks');
var coins = require('./coins');
var Transaction = require('./transaction');
function Block(network) {
    typeforce(types.maybe(types.Network), network);
    if (coins.isZcash(network)) {
        /* istanbul ignore next */
        throw new Error('unsupported network');
    }
    network = network || networks.bitcoin;
    this.version = 1;
    this.prevHash = null;
    this.merkleRoot = null;
    this.timestamp = 0;
    this.bits = 0;
    this.nonce = 0;
    this.network = network;
    if (coins.isZcashCompatible(network)) {
        this.finalSaplingRoot = null;
        this.solutionSize = 0;
        this.solution = null;
    }
}
Block.HEADER_BYTE_SIZE = 80;
Block.ZCASH_HEADER_BYTE_SIZE = 140;
Block.prototype.byteLength = function (headersOnly) {
    if (coins.isZcashCompatible(this.network)) {
        var solutionSizeNum = this.solutionSize || 0;
        var headerSizeNum = Block.ZCASH_HEADER_BYTE_SIZE + varuint.encodingLength(solutionSizeNum) + solutionSizeNum;
        if (headersOnly) {
            return headerSizeNum;
        }
        return headerSizeNum +
            varuint.encodingLength(this.transactions.length) + this.transactions.reduce(function (a, x) {
            return a + x.byteLength();
        }, 0);
    }
    if (headersOnly || !this.transactions)
        return Block.HEADER_BYTE_SIZE;
    return Block.HEADER_BYTE_SIZE +
        varuint.encodingLength(this.transactions.length) + this.transactions.reduce(function (a, x) {
        return a + x.byteLength();
    }, 0);
};
Block.fromBuffer = function (buffer, network) {
    network = network || networks.bitcoin;
    const bufferReader = new bufferutils.BufferReader(buffer);
    var block = new Block(network);
    let headerLength = block.byteLength(true);
    if (buffer.length < headerLength)
        throw new Error('Buffer too small (< ' + headerLength + ' bytes)');
    block.version = bufferReader.readInt32();
    block.prevHash = bufferReader.readSlice(32);
    block.merkleRoot = bufferReader.readSlice(32);
    if (coins.isZcashCompatible(network)) {
        block.finalSaplingRoot = bufferReader.readSlice(32);
    }
    block.timestamp = bufferReader.readUInt32();
    block.bits = bufferReader.readUInt32();
    if (coins.isZcashCompatible(network)) {
        block.nonce = bufferReader.readSlice(32);
        block.solutionSize = bufferReader.readVarInt();
        block.solution = bufferReader.readSlice(block.solutionSize);
    }
    else {
        // Not sure sure why the nonce is read as UInt 32 and not as a slice
        block.nonce = bufferReader.readUInt32();
    }
    if (bufferReader.buffer.length === headerLength)
        return block;
    function readTransaction() {
        var tx = Transaction.fromBuffer(buffer.slice(bufferReader.offset), network, true);
        bufferReader.offset += tx.byteLength();
        return tx;
    }
    var nTransactions = bufferReader.readVarInt();
    block.transactions = [];
    for (var i = 0; i < nTransactions; ++i) {
        var tx = readTransaction();
        block.transactions.push(tx);
    }
    return block;
};
Block.fromHex = function (hex, network) {
    return Block.fromBuffer(Buffer.from(hex, 'hex'), network);
};
Block.prototype.getHash = function () {
    return bcrypto.hash256(this.toBuffer(true));
};
Block.prototype.getId = function () {
    return this.getHash().reverse().toString('hex');
};
Block.prototype.getUTCDate = function () {
    var date = new Date(0); // epoch
    date.setUTCSeconds(this.timestamp);
    return date;
};
// TODO: buffer, offset compatibility
Block.prototype.toBuffer = function (headersOnly) {
    var buffer = Buffer.allocUnsafe(this.byteLength(headersOnly));
    var bufferWriter = new bufferutils.BufferWriter(buffer);
    bufferWriter.writeInt32(this.version);
    bufferWriter.writeSlice(this.prevHash);
    bufferWriter.writeSlice(this.merkleRoot);
    if (coins.isZcashCompatible(this.network)) {
        bufferWriter.writeSlice(this.finalSaplingRoot);
    }
    bufferWriter.writeUInt32(this.timestamp);
    bufferWriter.writeUInt32(this.bits);
    if (coins.isZcashCompatible(this.network)) {
        bufferWriter.writeSlice(this.nonce);
        // TODO: use writeVarInt
        varuint.encode(this.solutionSize, bufferWriter.buffer, bufferWriter.offset);
        bufferWriter.offset += varuint.encode.bytes;
        bufferWriter.writeSlice(this.solution);
    }
    else {
        // Not sure sure why the nonce is interpreted as UInt 32 and not a slice in bitcoin
        bufferWriter.writeUInt32(this.nonce);
    }
    if (headersOnly || !this.transactions)
        return buffer;
    // TODO: use writeVarInt
    varuint.encode(this.transactions.length, bufferWriter.buffer, bufferWriter.offset);
    bufferWriter.offset += varuint.encode.bytes;
    // TODO: use writeVarInt
    this.transactions.forEach(function (tx) {
        var txSize = tx.byteLength(); // TODO: extract from toBuffer?
        tx.toBuffer(bufferWriter.buffer, bufferWriter.offset);
        bufferWriter.offset += txSize;
    });
    return buffer;
};
Block.prototype.toHex = function (headersOnly) {
    return this.toBuffer(headersOnly).toString('hex');
};
Block.calculateTarget = function (bits) {
    var exponent = ((bits & 0xff000000) >> 24) - 3;
    var mantissa = bits & 0x007fffff;
    var target = Buffer.alloc(32, 0);
    if (exponent < 0) {
        // If it is negative, we will overflow the target buffer so we have to slice the mantissa to fit
        mantissa = mantissa >> (8 * Math.abs(exponent));
        target.writeUInt32BE(mantissa, 28);
    }
    else if (exponent > 28) {
        // If it is greater than 28, we need to shift the mantissa since the offset cannot be greater than 32 - 4
        // (safe-buffer restriction)
        mantissa <<= 8 * (exponent - 28);
        target.writeUInt32BE(mantissa, 0);
    }
    else {
        target.writeUInt32BE(mantissa, 28 - exponent);
    }
    return target;
};
Block.calculateMerkleRoot = function (transactions) {
    typeforce([{ getHash: types.Function }], transactions);
    if (transactions.length === 0)
        throw TypeError('Cannot compute merkle root for zero transactions');
    var hashes = transactions.map(function (transaction) {
        return transaction.getHash();
    });
    return fastMerkleRoot(hashes, bcrypto.hash256);
};
Block.prototype.checkMerkleRoot = function () {
    if (!this.transactions)
        return false;
    var actualMerkleRoot = Block.calculateMerkleRoot(this.transactions);
    return this.merkleRoot.compare(actualMerkleRoot) === 0;
};
Block.prototype.checkProofOfWork = function () {
    var hash = this.getHash().reverse();
    var target = Block.calculateTarget(this.bits);
    return hash.compare(target) <= 0;
};
module.exports = Block;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmxvY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUMxQyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDakMsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUE7QUFDbkQsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQ3BDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM5QixJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7QUFDMUMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUE7QUFDeEMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQ3BDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUU5QixJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7QUFFMUMsU0FBUyxLQUFLLENBQUUsT0FBTztJQUNyQixTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDOUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzFCLDBCQUEwQjtRQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUE7S0FDdkM7SUFDRCxPQUFPLEdBQUcsT0FBTyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUE7SUFDckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUE7SUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENB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S0FBSyxDQUFDLENBQUE7QUFDeEQsQ0FBQyxDQUFBO0FBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRztJQUNqQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDbkMsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFN0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNsQyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGJjcnlwdG8gPSByZXF1aXJlKCcuL2NyeXB0bycpXG52YXIgZmFzdE1lcmtsZVJvb3QgPSByZXF1aXJlKCdtZXJrbGUtbGliL2Zhc3RSb290JylcbnZhciB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKVxudmFyIHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpXG52YXIgYnVmZmVydXRpbHMgPSByZXF1aXJlKCcuL2J1ZmZlcnV0aWxzJylcbnZhciB2YXJ1aW50ID0gcmVxdWlyZSgndmFydWludC1iaXRjb2luJylcbnZhciBuZXR3b3JrcyA9IHJlcXVpcmUoJy4vbmV0d29ya3MnKVxudmFyIGNvaW5zID0gcmVxdWlyZSgnLi9jb2lucycpXG5cbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vdHJhbnNhY3Rpb24nKVxuXG5mdW5jdGlvbiBCbG9jayAobmV0d29yaykge1xuICB0eXBlZm9yY2UodHlwZXMubWF5YmUodHlwZXMuTmV0d29yayksIG5ldHdvcmspXG4gIGlmIChjb2lucy5pc1pjYXNoKG5ldHdvcmspKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIG5ldHdvcmsnKVxuICB9XG4gIG5ldHdvcmsgPSBuZXR3b3JrIHx8IG5ldHdvcmtzLmJpdGNvaW5cbiAgdGhpcy52ZXJzaW9uID0gMVxuICB0aGlzLnByZXZIYXNoID0gbnVsbFxuICB0aGlzLm1lcmtsZVJvb3QgPSBudWxsXG4gIHRoaXMudGltZXN0YW1wID0gMFxuICB0aGlzLmJpdHMgPSAwXG4gIHRoaXMubm9uY2UgPSAwXG4gIHRoaXMubmV0d29yayA9IG5ldHdvcmtcbiAgaWYgKGNvaW5zLmlzWmNhc2hDb21wYXRpYmxlKG5ldHdvcmspKSB7XG4gICAgdGhpcy5maW5hbFNhcGxpbmdSb290ID0gbnVsbFxuICAgIHRoaXMuc29sdXRpb25TaXplID0gMFxuICAgIHRoaXMuc29sdXRpb24gPSBudWxsXG4gIH1cbn1cblxuQmxvY2suSEVBREVSX0JZVEVfU0laRSA9IDgwXG5CbG9jay5aQ0FTSF9IRUFERVJfQllURV9TSVpFID0gMTQwXG5cbkJsb2NrLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gKGhlYWRlcnNPbmx5KSB7XG4gIGlmIChjb2lucy5pc1pjYXNoQ29tcGF0aWJsZSh0aGlzLm5ldHdvcmspKSB7XG4gICAgdmFyIHNvbHV0aW9uU2l6ZU51bSA9IHRoaXMuc29sdXRpb25TaXplIHx8IDBcbiAgICB2YXIgaGVhZGVyU2l6ZU51bSA9IEJsb2NrLlpDQVNIX0hFQURFUl9CWVRFX1NJWkUgKyB2YXJ1aW50LmVuY29kaW5nTGVuZ3RoKHNvbHV0aW9uU2l6ZU51bSkgKyBzb2x1dGlvblNpemVOdW1cbiAgICBpZiAoaGVhZGVyc09ubHkpIHtcbiAgICAgIHJldHVybiBoZWFkZXJTaXplTnVtXG4gICAgfVxuICAgIHJldHVybiBoZWFkZXJTaXplTnVtICtcbiAgICAgIHZhcnVpbnQuZW5jb2RpbmdMZW5ndGgodGhpcy50cmFuc2FjdGlvbnMubGVuZ3RoKSArIHRoaXMudHJhbnNhY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAoYSwgeCkge1xuICAgICAgICByZXR1cm4gYSArIHguYnl0ZUxlbmd0aCgpXG4gICAgICB9LCAwKVxuICB9XG5cbiAgaWYgKGhlYWRlcnNPbmx5IHx8ICF0aGlzLnRyYW5zYWN0aW9ucykgcmV0dXJuIEJsb2NrLkhFQURFUl9CWVRFX1NJWkVcblxuICByZXR1cm4gQmxvY2suSEVBREVSX0JZVEVfU0laRSArXG4gICAgdmFydWludC5lbmNvZGluZ0xlbmd0aCh0aGlzLnRyYW5zYWN0aW9ucy5sZW5ndGgpICsgdGhpcy50cmFuc2FjdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhLCB4KSB7XG4gICAgICByZXR1cm4gYSArIHguYnl0ZUxlbmd0aCgpXG4gICAgfSwgMClcbn1cblxuQmxvY2suZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uIChidWZmZXIsIG5ldHdvcmspIHtcbiAgbmV0d29yayA9IG5ldHdvcmsgfHwgbmV0d29ya3MuYml0Y29pblxuXG4gIGNvbnN0IGJ1ZmZlclJlYWRlciA9IG5ldyBidWZmZXJ1dGlscy5CdWZmZXJSZWFkZXIoYnVmZmVyKVxuXG4gIHZhciBibG9jayA9IG5ldyBCbG9jayhuZXR3b3JrKVxuXG4gIGxldCBoZWFkZXJMZW5ndGggPSBibG9jay5ieXRlTGVuZ3RoKHRydWUpXG4gIGlmIChidWZmZXIubGVuZ3RoIDwgaGVhZGVyTGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0J1ZmZlciB0b28gc21hbGwgKDwgJyArIGhlYWRlckxlbmd0aCArICcgYnl0ZXMpJylcblxuICBibG9jay52ZXJzaW9uID0gYnVmZmVyUmVhZGVyLnJlYWRJbnQzMigpXG4gIGJsb2NrLnByZXZIYXNoID0gYnVmZmVyUmVhZGVyLnJlYWRTbGljZSgzMilcbiAgYmxvY2subWVya2xlUm9vdCA9IGJ1ZmZlclJlYWRlci5yZWFkU2xpY2UoMzIpXG4gIGlmIChjb2lucy5pc1pjYXNoQ29tcGF0aWJsZShuZXR3b3JrKSkge1xuICAgIGJsb2NrLmZpbmFsU2FwbGluZ1Jvb3QgPSBidWZmZXJSZWFkZXIucmVhZFNsaWNlKDMyKVxuICB9XG4gIGJsb2NrLnRpbWVzdGFtcCA9IGJ1ZmZlclJlYWRlci5yZWFkVUludDMyKClcbiAgYmxvY2suYml0cyA9IGJ1ZmZlclJlYWRlci5yZWFkVUludDMyKClcbiAgaWYgKGNvaW5zLmlzWmNhc2hDb21wYXRpYmxlKG5ldHdvcmspKSB7XG4gICAgYmxvY2subm9uY2UgPSBidWZmZXJSZWFkZXIucmVhZFNsaWNlKDMyKVxuICAgIGJsb2NrLnNvbHV0aW9uU2l6ZSA9IGJ1ZmZlclJlYWRlci5yZWFkVmFySW50KClcbiAgICBibG9jay5zb2x1dGlvbiA9IGJ1ZmZlclJlYWRlci5yZWFkU2xpY2UoYmxvY2suc29sdXRpb25TaXplKVxuICB9IGVsc2Uge1xuICAgIC8vIE5vdCBzdXJlIHN1cmUgd2h5IHRoZSBub25jZSBpcyByZWFkIGFzIFVJbnQgMzIgYW5kIG5vdCBhcyBhIHNsaWNlXG4gICAgYmxvY2subm9uY2UgPSBidWZmZXJSZWFkZXIucmVhZFVJbnQzMigpXG4gIH1cblxuICBpZiAoYnVmZmVyUmVhZGVyLmJ1ZmZlci5sZW5ndGggPT09IGhlYWRlckxlbmd0aCkgcmV0dXJuIGJsb2NrXG5cbiAgZnVuY3Rpb24gcmVhZFRyYW5zYWN0aW9uICgpIHtcbiAgICB2YXIgdHggPSBUcmFuc2FjdGlvbi5mcm9tQnVmZmVyKGJ1ZmZlci5zbGljZShidWZmZXJSZWFkZXIub2Zmc2V0KSwgbmV0d29yaywgdHJ1ZSlcbiAgICBidWZmZXJSZWFkZXIub2Zmc2V0ICs9IHR4LmJ5dGVMZW5ndGgoKVxuICAgIHJldHVybiB0eFxuICB9XG5cbiAgdmFyIG5UcmFuc2FjdGlvbnMgPSBidWZmZXJSZWFkZXIucmVhZFZhckludCgpXG4gIGJsb2NrLnRyYW5zYWN0aW9ucyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuVHJhbnNhY3Rpb25zOyArK2kpIHtcbiAgICB2YXIgdHggPSByZWFkVHJhbnNhY3Rpb24oKVxuICAgIGJsb2NrLnRyYW5zYWN0aW9ucy5wdXNoKHR4KVxuICB9XG5cbiAgcmV0dXJuIGJsb2NrXG59XG5cbkJsb2NrLmZyb21IZXggPSBmdW5jdGlvbiAoaGV4LCBuZXR3b3JrKSB7XG4gIHJldHVybiBCbG9jay5mcm9tQnVmZmVyKEJ1ZmZlci5mcm9tKGhleCwgJ2hleCcpLCBuZXR3b3JrKVxufVxuXG5CbG9jay5wcm90b3R5cGUuZ2V0SGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGJjcnlwdG8uaGFzaDI1Nih0aGlzLnRvQnVmZmVyKHRydWUpKVxufVxuXG5CbG9jay5wcm90b3R5cGUuZ2V0SWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmdldEhhc2goKS5yZXZlcnNlKCkudG9TdHJpbmcoJ2hleCcpXG59XG5cbkJsb2NrLnByb3RvdHlwZS5nZXRVVENEYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApIC8vIGVwb2NoXG4gIGRhdGUuc2V0VVRDU2Vjb25kcyh0aGlzLnRpbWVzdGFtcClcblxuICByZXR1cm4gZGF0ZVxufVxuXG4vLyBUT0RPOiBidWZmZXIsIG9mZnNldCBjb21wYXRpYmlsaXR5XG5CbG9jay5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiAoaGVhZGVyc09ubHkpIHtcbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSh0aGlzLmJ5dGVMZW5ndGgoaGVhZGVyc09ubHkpKVxuICB2YXIgYnVmZmVyV3JpdGVyID0gbmV3IGJ1ZmZlcnV0aWxzLkJ1ZmZlcldyaXRlcihidWZmZXIpXG5cbiAgYnVmZmVyV3JpdGVyLndyaXRlSW50MzIodGhpcy52ZXJzaW9uKVxuICBidWZmZXJXcml0ZXIud3JpdGVTbGljZSh0aGlzLnByZXZIYXNoKVxuICBidWZmZXJXcml0ZXIud3JpdGVTbGljZSh0aGlzLm1lcmtsZVJvb3QpXG4gIGlmIChjb2lucy5pc1pjYXNoQ29tcGF0aWJsZSh0aGlzLm5ldHdvcmspKSB7XG4gICAgYnVmZmVyV3JpdGVyLndyaXRlU2xpY2UodGhpcy5maW5hbFNhcGxpbmdSb290KVxuICB9XG4gIGJ1ZmZlcldyaXRlci53cml0ZVVJbnQzMih0aGlzLnRpbWVzdGFtcClcbiAgYnVmZmVyV3JpdGVyLndyaXRlVUludDMyKHRoaXMuYml0cylcbiAgaWYgKGNvaW5zLmlzWmNhc2hDb21wYXRpYmxlKHRoaXMubmV0d29yaykpIHtcbiAgICBidWZmZXJXcml0ZXIud3JpdGVTbGljZSh0aGlzLm5vbmNlKVxuICAgIC8vIFRPRE86IHVzZSB3cml0ZVZhckludFxuICAgIHZhcnVpbnQuZW5jb2RlKHRoaXMuc29sdXRpb25TaXplLCBidWZmZXJXcml0ZXIuYnVmZmVyLCBidWZmZXJXcml0ZXIub2Zmc2V0KVxuICAgIGJ1ZmZlcldyaXRlci5vZmZzZXQgKz0gdmFydWludC5lbmNvZGUuYnl0ZXNcbiAgICBidWZmZXJXcml0ZXIud3JpdGVTbGljZSh0aGlzLnNvbHV0aW9uKVxuICB9IGVsc2Uge1xuICAgIC8vIE5vdCBzdXJlIHN1cmUgd2h5IHRoZSBub25jZSBpcyBpbnRlcnByZXRlZCBhcyBVSW50IDMyIGFuZCBub3QgYSBzbGljZSBpbiBiaXRjb2luXG4gICAgYnVmZmVyV3JpdGVyLndyaXRlVUludDMyKHRoaXMubm9uY2UpXG4gIH1cblxuICBpZiAoaGVhZGVyc09ubHkgfHwgIXRoaXMudHJhbnNhY3Rpb25zKSByZXR1cm4gYnVmZmVyXG5cbiAgLy8gVE9ETzogdXNlIHdyaXRlVmFySW50XG4gIHZhcnVpbnQuZW5jb2RlKHRoaXMudHJhbnNhY3Rpb25zLmxlbmd0aCwgYnVmZmVyV3JpdGVyLmJ1ZmZlciwgYnVmZmVyV3JpdGVyLm9mZnNldClcbiAgYnVmZmVyV3JpdGVyLm9mZnNldCArPSB2YXJ1aW50LmVuY29kZS5ieXRlc1xuXG4gIC8vIFRPRE86IHVzZSB3cml0ZVZhckludFxuICB0aGlzLnRyYW5zYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh0eCkge1xuICAgIHZhciB0eFNpemUgPSB0eC5ieXRlTGVuZ3RoKCkgLy8gVE9ETzogZXh0cmFjdCBmcm9tIHRvQnVmZmVyP1xuICAgIHR4LnRvQnVmZmVyKGJ1ZmZlcldyaXRlci5idWZmZXIsIGJ1ZmZlcldyaXRlci5vZmZzZXQpXG4gICAgYnVmZmVyV3JpdGVyLm9mZnNldCArPSB0eFNpemVcbiAgfSlcblxuICByZXR1cm4gYnVmZmVyXG59XG5cbkJsb2NrLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uIChoZWFkZXJzT25seSkge1xuICByZXR1cm4gdGhpcy50b0J1ZmZlcihoZWFkZXJzT25seSkudG9TdHJpbmcoJ2hleCcpXG59XG5cbkJsb2NrLmNhbGN1bGF0ZVRhcmdldCA9IGZ1bmN0aW9uIChiaXRzKSB7XG4gIHZhciBleHBvbmVudCA9ICgoYml0cyAmIDB4ZmYwMDAwMDApID4+IDI0KSAtIDNcbiAgdmFyIG1hbnRpc3NhID0gYml0cyAmIDB4MDA3ZmZmZmZcbiAgdmFyIHRhcmdldCA9IEJ1ZmZlci5hbGxvYygzMiwgMClcbiAgaWYgKGV4cG9uZW50IDwgMCkge1xuICAgIC8vIElmIGl0IGlzIG5lZ2F0aXZlLCB3ZSB3aWxsIG92ZXJmbG93IHRoZSB0YXJnZXQgYnVmZmVyIHNvIHdlIGhhdmUgdG8gc2xpY2UgdGhlIG1hbnRpc3NhIHRvIGZpdFxuICAgIG1hbnRpc3NhID0gbWFudGlzc2EgPj4gKDggKiBNYXRoLmFicyhleHBvbmVudCkpXG4gICAgdGFyZ2V0LndyaXRlVUludDMyQkUobWFudGlzc2EsIDI4KVxuICB9IGVsc2UgaWYgKGV4cG9uZW50ID4gMjgpIHtcbiAgICAvLyBJZiBpdCBpcyBncmVhdGVyIHRoYW4gMjgsIHdlIG5lZWQgdG8gc2hpZnQgdGhlIG1hbnRpc3NhIHNpbmNlIHRoZSBvZmZzZXQgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAzMiAtIDRcbiAgICAvLyAoc2FmZS1idWZmZXIgcmVzdHJpY3Rpb24pXG4gICAgbWFudGlzc2EgPDw9IDggKiAoZXhwb25lbnQgLSAyOClcbiAgICB0YXJnZXQud3JpdGVVSW50MzJCRShtYW50aXNzYSwgMClcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQud3JpdGVVSW50MzJCRShtYW50aXNzYSwgMjggLSBleHBvbmVudClcbiAgfVxuICByZXR1cm4gdGFyZ2V0XG59XG5cbkJsb2NrLmNhbGN1bGF0ZU1lcmtsZVJvb3QgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb25zKSB7XG4gIHR5cGVmb3JjZShbeyBnZXRIYXNoOiB0eXBlcy5GdW5jdGlvbiB9XSwgdHJhbnNhY3Rpb25zKVxuICBpZiAodHJhbnNhY3Rpb25zLmxlbmd0aCA9PT0gMCkgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29tcHV0ZSBtZXJrbGUgcm9vdCBmb3IgemVybyB0cmFuc2FjdGlvbnMnKVxuXG4gIHZhciBoYXNoZXMgPSB0cmFuc2FjdGlvbnMubWFwKGZ1bmN0aW9uICh0cmFuc2FjdGlvbikge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbi5nZXRIYXNoKClcbiAgfSlcblxuICByZXR1cm4gZmFzdE1lcmtsZVJvb3QoaGFzaGVzLCBiY3J5cHRvLmhhc2gyNTYpXG59XG5cbkJsb2NrLnByb3RvdHlwZS5jaGVja01lcmtsZVJvb3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy50cmFuc2FjdGlvbnMpIHJldHVybiBmYWxzZVxuXG4gIHZhciBhY3R1YWxNZXJrbGVSb290ID0gQmxvY2suY2FsY3VsYXRlTWVya2xlUm9vdCh0aGlzLnRyYW5zYWN0aW9ucylcbiAgcmV0dXJuIHRoaXMubWVya2xlUm9vdC5jb21wYXJlKGFjdHVhbE1lcmtsZVJvb3QpID09PSAwXG59XG5cbkJsb2NrLnByb3RvdHlwZS5jaGVja1Byb29mT2ZXb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGFzaCA9IHRoaXMuZ2V0SGFzaCgpLnJldmVyc2UoKVxuICB2YXIgdGFyZ2V0ID0gQmxvY2suY2FsY3VsYXRlVGFyZ2V0KHRoaXMuYml0cylcblxuICByZXR1cm4gaGFzaC5jb21wYXJlKHRhcmdldCkgPD0gMFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJsb2NrXG4iXX0=